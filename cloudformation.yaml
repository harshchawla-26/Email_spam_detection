AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: CCBD Assignment 3 - Email Spam Detector 


Parameters:
  EndpointParameter: 
    Type: String
    Default: sms-spam-classifier-mxnet-2022-11-27-19-50-29-196


Resources:
  s3EmailStorageBucket:  
    Type: AWS::S3::Bucket 
    DependsOn: LambdaInvokePermission 
    Properties:
      BucketName: email-storage-bucket-v22-assignment3 
      # NotificationConfiguration: 
      #   LambdaConfigurations: 
      #     - Event: s3:ObjectCreated:Put 
      #       Function: !GetAtt LambdaFunction.Arn 
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False


  s3EmailStorageBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref s3EmailStorageBucket 
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:* 
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref s3EmailStorageBucket 
                - /*
            Principal: '*'


  LambdaFunction: 
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: spam-email-detector-lf
      Handler: lambda_function.lambda_handler
      Runtime: python3.9 
      Description: ""
      MemorySize: 128
      Timeout: 183
      Role: !GetAtt AdminRole.Arn 
      Environment:
        Variables: 
          SAGEMAKERENDPOINT: !Ref EndpointParameter 
          REGION: us-east-1 
      Layers:
        - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:1

      Code: 
        S3Bucket: 'a3-lambda-code-bucket-assignment3' 
        S3Key: !Sub 'utils.zip' 


  LambdaInvokePermission: 
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn 
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: 'arn:aws:s3:::email-storage-bucket-v2-assignment3'  


  AdminRole: 
    Type: "AWS::IAM::Role" 
    Properties:
      RoleName: admin-role-v2
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com" 
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "myPolicyhc" 
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "*"
                Resource: "*"


  ReceiptRuleSet: 
    Type: 'AWS::SES::ReceiptRuleSet'
    Properties:
      RuleSetName: email-receiving-rule-set-2 


  ReceiptRule1: 
    Type: 'AWS::SES::ReceiptRule'
    Properties:
      RuleSetName: !Ref ReceiptRuleSet 
      Rule:
        Name: email-receiving-receipt-rule-2
        Enabled: true
        ScanEnabled: true
        TlsPolicy: Optional
        Actions:
          - S3Action:
              BucketName: !Ref s3EmailStorageBucket 
